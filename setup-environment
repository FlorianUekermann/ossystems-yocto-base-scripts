#!/bin/sh
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012 O.S. Systems Software LTDA.
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
    return 1
fi


debug() {
    [ -n "$SE_DEBUG" ] && echo "DEBUG: $@"
}

eval_hook() {
    local module=`basename $1`
    local hook=$2
    local out=
    [ -n "$SE_DEBUG" ] || out="2>/dev/null"
    eval "${module}_${hook} $cmd_line_args" $out || true
}

cmd_line_args=$@

# Directory where to search for modules
modules_dir=setup-environment.d

# Determine modules
modules=
for dir in `ls -d sources/*`; do
    mdir="$dir/conf/$modules_dir"
    if [ -d "$mdir" ]; then
        files=`ls $mdir | grep -v '~$'`
        for file in $files; do
            modules="$modules $mdir/$file"
        done
    fi
done

# Load modules
for module in $modules; do
    debug "Loading $module"
    source $module
done

# Run before_init hooks
for module in $modules; do
    eval_hook $module before_init
done

if [ -z "$MACHINE" ]; then
    echo "ERROR: machine not specified. Exiting..."
    return 1
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE='i686'
fi

if [ -z "$DISTRO" ]; then
    DISTRO='poky'
fi

OEROOT=sources/poky
if [ -e sources/oe-core ]; then
    OEROOT=sources/oe-core
fi

CWD=`pwd`
LOCAL_CONF=conf/local.conf

# Ensure all files in sources/base are kept in sync with project root
updated=
for f in $CWD/sources/base/*; do
    file="$(basename $f)"
    if [ "$file" = "conf" ] || echo $file | grep -q '~$'; then
        continue
    fi

    if ! cmp -s "$file" "$f"; then
        updated="true"
        [ -e $file ] && chmod u+w $file
        cp $f $file
    fi
done
if [ "$updated" = "true" ]; then
    echo "The project root content has been updated. Please run $0 again."
    return
fi

cd $OEROOT

. ./oe-init-build-env $CWD/$1 > /dev/null

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo $PATH | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if [ ! -e ${LOCAL_CONF}.sample ]; then
    mv $LOCAL_CONF ${LOCAL_CONF}.sample

    # Generate the local.conf based on the Yocto defaults
    TEMPLATES=$CWD/sources/base/conf 
    NCPU=`grep -c processor /proc/cpuinfo`
    grep -v '^#\|^$' ${LOCAL_CONF}.sample > $LOCAL_CONF
    cat >> $LOCAL_CONF <<EOF

BB_NUMBER_THREADS = '$NCPU'
PARALLEL_MAKE = '-j $NCPU'
EOF
    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -i $LOCAL_CONF

    cp $TEMPLATES/* conf/

    generated_config=1
fi

# Run after_init hooks
for module in $modules; do
    eval_hook $module after_init
done
